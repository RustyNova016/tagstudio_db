use std::backtrace::Backtrace;

/// Wrapper around [sqlx::Error] with backtrace support
///
/// The implementation was generated by [snafu], but modified to make `SqlxSnafu` crate wide
#[derive(Debug)]
pub struct SqlxError {
    source: sqlx::Error,
    backtrace: Backtrace,
}

// Recursive expansion of Snafu macro
// ===================================

impl ::snafu::Error for SqlxError
where
    Self: ::core::fmt::Debug + ::core::fmt::Display,
{
    fn description(&self) -> &str {
        match *self {
            Self { .. } => stringify!(SqlxError),
        }
    }
    fn cause(&self) -> ::core::option::Option<&dyn ::snafu::Error> {
        use ::snafu::AsErrorSource;
        match *self {
            Self { ref source, .. } => ::core::option::Option::Some(source.as_error_source()),
        }
    }
    fn source(&self) -> ::core::option::Option<&(dyn ::snafu::Error + 'static)> {
        use ::snafu::AsErrorSource;
        match *self {
            Self { ref source, .. } => ::core::option::Option::Some(source.as_error_source()),
        }
    }
}

impl ::snafu::ErrorCompat for SqlxError {
    fn backtrace(&self) -> ::core::option::Option<&::snafu::Backtrace> {
        match *self {
            Self { ref backtrace, .. } => ::snafu::AsBacktrace::as_backtrace(backtrace),
        }
    }
}

impl ::core::fmt::Display for SqlxError {
    fn fmt(&self, __snafu_display_formatter: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        #[allow(unused_variables)]
        match *self {
            Self {
                ref backtrace,
                ref source,
            } => {
                write!(
                    __snafu_display_formatter,
                    "Sqlx generated an error: {source}",
                )
            }
        }
    }
}
#[derive(Debug, Copy, Clone)]
#[doc = "SNAFU context selector for the `SqlxError` error"]
pub(crate) struct SqlxSnafu;

impl ::snafu::IntoError<SqlxError> for SqlxSnafu
where
    SqlxError: ::snafu::Error + ::snafu::ErrorCompat,
{
    type Source = sqlx::Error;
    #[track_caller]
    fn into_error(self, error: Self::Source) -> SqlxError {
        SqlxError {
            backtrace: {
                use ::snafu::AsErrorSource;
                let error = error.as_error_source();
                ::snafu::GenerateImplicitData::generate_with_source(error)
            },
            source: error,
        }
    }
}
